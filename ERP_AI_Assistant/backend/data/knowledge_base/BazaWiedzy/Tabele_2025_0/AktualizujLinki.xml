<?xml version="1.0" encoding="windows-1250" ?>
<?xml-stylesheet type="text/xsl" href="Style\Sql.xsl" ?>
<!-- Plik wygenerowany automatycznie ze skryptu sql 21.7.2024 21:55:56 -->
<!-- Copyright (C)CDN 2003 -->
<ROOT>
<proceduredef name="AktualizujLinki">
CREATE PROCEDURE cdn.AktualizujLinki @KT CHAR(1)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @GIDTyp SMALLINT
		, @GIDNumer INT
		, @GIDLp SMALLINT
		, @GrOTyp SMALLINT
		, @GrONumer INT
		, @GrOLp SMALLINT
		, @Poziom INT
	DECLARE @GIDFirma INT

	SELECT @GIDFirma = CDN.GIDFirma()

	IF @KT = 'T'
	BEGIN --Bug #186572: 175416 - przepisanie tego na cte
		TRUNCATE TABLE CDN.TwrLinki

		--usuwanie rekordów bez rodzica (pomijaj¹c Grupê G³ówn¹)
		DELETE CDN.TwrGrupy
		FROM CDN.TwrGrupy GrpToDel
		WHERE NOT EXISTS (
				SELECT *
				FROM CDN.TwrGrupy GrpOfParents
				WHERE GrpOfParents.TwG_GIDNumer = GrpToDel.TwG_GrONumer
					OR (
						GrpOfParents.TwG_GIDNumer = 0
						AND GrpOfParents.TwG_GIDTyp = - 16
						)
				);

		INSERT INTO [CDN].[TwrLinki] (
			[TwL_GIDTyp]
			, [TwL_GIDFirma]
			, [TwL_GIDNumer]
			, [TwL_GIDLp]
			, [TwL_GrOTyp]
			, [TwL_GrOFirma]
			, [TwL_GrONumer]
			, [TwL_GrOLp]
			, [TwL_Lisc]
			, [TwL_LiczbaPowtorzen]
			, [TwL_TStampDataMod]
			)
		SELECT OryTyp
			, FirmaId
			, OryNumer
			, 0
			, - 16
			, FirmaId
			, GrONumer
			, 0
			, Lisc
			, LiczbaPowtorzen
			, CzasModyfikacji
		FROM cdn.BudujTwrLinkiKuKorzeniowi(NULL, NULL)

		RETURN
	END
	ELSE IF @KT = 'K'
		TRUNCATE TABLE CDN.KntLinki
	ELSE IF @KT = 'S'
		TRUNCATE TABLE CDN.SrtLinki
	ELSE IF @KT = 'F'
		TRUNCATE TABLE CDN.FrmLinki

	-- same grupy
	CREATE TABLE #G (
		GIDTyp SMALLINT
		, GIDNumer INT
		, GIDLp SMALLINT
		, GrOTyp SMALLINT
		, GrONumer INT
		, GrOLp SMALLINT
		, Poziom INT
		)

	-- rejestr grup, które zosta³y obrobione (do sumowania, ¿eby ich nie sumowaæ ponownie)
	SELECT GIDTyp
		, GIDNumer
		, GIDLp
	INTO #G1
	FROM #G

	-- dodajemy grupy na razie z poziomem 0
	IF @KT = 'T'
		INSERT INTO #G (
			GIDTyp
			, GIDNumer
			, GIDLp
			, GrOTyp
			, GrONumer
			, GrOLp
			, Poziom
			)
		SELECT TwG_GIDTyp
			, TwG_GIDNumer
			, 0
			, TwG_GrOTyp
			, TwG_GrONumer
			, 0
			, 0
		FROM cdn.TwrGrupy
		WHERE TwG_GIDTyp = - 16
	ELSE IF @KT = 'K'
		INSERT INTO #G (
			GIDTyp
			, GIDNumer
			, GIDLp
			, GrOTyp
			, GrONumer
			, GrOLp
			, Poziom
			)
		SELECT KnG_GIDTyp
			, KnG_GIDNumer
			, 0
			, KnG_GrOTyp
			, KnG_GrONumer
			, 0
			, 0
		FROM cdn.KnTGrupy
		WHERE KnG_GIDTyp = - 32
	ELSE IF @KT = 'S'
		INSERT INTO #G (
			GIDTyp
			, GIDNumer
			, GIDLp
			, GrOTyp
			, GrONumer
			, GrOLp
			, Poziom
			)
		SELECT SrG_GIDTyp
			, SrG_GIDNumer
			, 0
			, SrG_GrOTyp
			, SrG_GrONumer
			, 0
			, 0
		FROM cdn.SrtGrupy
		WHERE SrG_GIDTyp = - 368
	ELSE IF @KT = 'F'
		INSERT INTO #G (
			GIDTyp
			, GIDNumer
			, GIDLp
			, GrOTyp
			, GrONumer
			, GrOLp
			, Poziom
			)
		SELECT DISTINCT FrS_GIDTyp
			, FrS_GIDNumer
			, FrS_GIDLp
			, FrS_GrOTyp
			, FrS_GrONumer
			, FrS_GrOLp
			, 0
		FROM cdn.FrmStruktura
		WHERE FrS_GIDTyp = - 4272
			AND FrS_GIDLp = 0 --AND FrS_ID NOT IN(1,2,3)

	-- Grupie g³ównej ustawiamy poziom na 1
	IF @KT = 'T'
		UPDATE #G
		SET Poziom = 1
		WHERE GIDTyp = - 16
			AND GIDNumer = 0
	ELSE IF @KT = 'K'
		UPDATE #G
		SET Poziom = 1
		WHERE GIDTyp = - 32
			AND GIDNumer = 0
	ELSE IF @KT = 'S'
		UPDATE #G
		SET Poziom = 1
		WHERE GIDTyp = - 368
			AND GIDNumer = 0
	ELSE IF @KT = 'F'
		UPDATE #G
		SET Poziom = 1
		FROM #G
		INNER JOIN CDN.FrmStruktura
			ON FrS_GIDTyp = GIDTyp
				AND FrS_GIDNumer = GIDNumer
				AND FrS_GIDLp = GIDLp
		WHERE FrS_ID IN (
				1
				, 2
				, 3
				) --FrS_GIDTyp = -4272

	-- Czyszczenie Grup z elementów (towarów,kontrahentów, ...)
	-- które nie maj¹ ojca (#G ma ju¿ praojca) i nie s¹ grup¹ g³ówn¹
	IF @KT = 'T'
		DELETE cdn.TwrGrupy
		FROM cdn.TwrGrupy
		LEFT JOIN #G
			ON TwG_GrOTyp = GIDTyp
				AND TwG_GrONumer = GIDNumer
				AND TwG_GrOLp = GIDLp
		WHERE TwG_GIDTyp = 16
			AND GIDTyp IS NULL --AND GIDTyp&lt;&gt;-1
	ELSE IF @KT = 'K'
		DELETE cdn.KntGrupy
		FROM cdn.KntGrupy
		LEFT JOIN #G
			ON KnG_GrOTyp = GIDTyp
				AND KnG_GrONumer = GIDNumer
				AND KnG_GrOLp = GIDLp
		WHERE KnG_GIDTyp = 32
			AND GIDTyp IS NULL --AND GIDTyp&lt;&gt;-1  --AB  TID:103839
	ELSE IF @KT = 'S'
		DELETE cdn.SrtGrupy
		FROM cdn.SrtGrupy
		LEFT JOIN #G
			ON SrG_GrOTyp = GIDTyp
				AND SrG_GrONumer = GIDNumer
				AND SrG_GrOLp = GIDLp
		WHERE SrG_GIDTyp = 368
			AND GIDTyp IS NULL --AND GIDTyp&lt;&gt;-1  --AB  TID:103839
	ELSE IF @KT = 'F'
		DELETE cdn.FrmStruktura
		FROM cdn.FrmStruktura
		LEFT JOIN #G
			ON FrS_GrOTyp = GIDTyp
				AND FrS_GrONumer = GIDNumer
				AND FrS_GrOLp = GIDLp
		WHERE (
				FrS_GIDTyp = 944
				OR FrS_GIDTyp = 128
				)
			AND GIDTyp IS NULL

	-- same elementy
	CREATE TABLE #L (
		GIDTyp SMALLINT
		, GIDNumer INT
		, GIDLp SMALLINT
		, GrOTyp SMALLINT
		, GrONumer INT
		, GrOLp SMALLINT
		, Lisc SMALLINT
		, LiczbaPowtorzen SMALLINT
		)

	-- dodajemy pozosta³e elementy na razie z poziomem 0 (za wyj¹tkiem grupy g³ównej)
	IF @KT = 'T'
		INSERT INTO #L (
			GIDTyp
			, GIDNumer
			, GIDLp
			, GrOTyp
			, GrONumer
			, GrOLp
			, Lisc
			, LiczbaPowtorzen
			)
		SELECT TwG_GIDTyp
			, TwG_GIDNumer
			, TwG_GIDLp
			, TwG_GrOTyp
			, TwG_GrONumer
			, TwG_GrOLp
			, 1
			, 1
		FROM cdn.TwrGrupy
		WHERE TwG_GIDTyp = - 16
			OR TwG_GIDNumer &gt; 0
	ELSE IF @KT = 'K'
		INSERT INTO #L (
			GIDTyp
			, GIDNumer
			, GIDLp
			, GrOTyp
			, GrONumer
			, GrOLp
			, Lisc
			, LiczbaPowtorzen
			)
		SELECT KnG_GIDTyp
			, KnG_GIDNumer
			, KnG_GIDLp
			, KnG_GrOTyp
			, KnG_GrONumer
			, KnG_GrOLp
			, 1
			, 1
		FROM cdn.KntGrupy
		WHERE NOT (KnG_GIDTyp = - 32 AND KnG_GIDNumer = 0) --wg opisu poza grup¹ g³ówn¹ to tak zmieniam, bo naprawia ERPXL-5450
	ELSE IF @KT = 'S'
		INSERT INTO #L (
			GIDTyp
			, GIDNumer
			, GIDLp
			, GrOTyp
			, GrONumer
			, GrOLp
			, Lisc
			, LiczbaPowtorzen
			)
		SELECT SrG_GIDTyp
			, SrG_GIDNumer
			, SrG_GIDLp
			, SrG_GrOTyp
			, SrG_GrONumer
			, SrG_GrOLp
			, 1
			, 1
		FROM cdn.SrtGrupy
		WHERE SrG_GIDNumer &gt; 0
	ELSE IF @KT = 'F'
		INSERT INTO #L (
			GIDTyp
			, GIDNumer
			, GIDLp
			, GrOTyp
			, GrONumer
			, GrOLp
			, Lisc
			, LiczbaPowtorzen
			)
		SELECT DISTINCT FrS_GIDTyp
			, FrS_GIDNumer
			, FrS_GIDLp
			, FrS_GrOTyp
			, FrS_GrONumer
			, FrS_GrOLp
			, 1
			, 1
		FROM cdn.FrmStruktura
		WHERE FrS_GIDLp = 0

	-- uzupelnianie poziomów w tabeli #G (jedziemy od góry)
	SET @Poziom = 1

	WHILE 1 = 1
	BEGIN
		-- jesli nie ma niewype³nionych poziomów, to koniec
		IF NOT EXISTS (
				SELECT *
				FROM #G
				WHERE Poziom = 0
				)
			BREAK

		-- update poziomu dla grup bêd¹cych dzieæmi danego ojca
		UPDATE #G
		SET Poziom = @Poziom + 1
		WHERE GrONumer IN (
				SELECT GIDNumer
				FROM #G
				WHERE Poziom = @Poziom
				)

		SET @Poziom = @Poziom + 1
	END

	-- uzupe³nianie tabeli TwrLinki
	-- kursor po poziomach od najni¿szego (tj. najwy¿szego )
	DECLARE P CURSOR LOCAL FAST_FORWARD
	FOR
	SELECT Poziom
	FROM #G
	GROUP BY Poziom
	ORDER BY Poziom DESC

	OPEN P

	WHILE 1 = 1
	BEGIN
		FETCH NEXT
		FROM P
		INTO @Poziom

		IF @@FETCH_STATUS &lt;&gt; 0
			BREAK

		-- STOP jeœli jesteœmy na najwy¿szym poziomie (praojciec zosta³ zupdatowany w poprzednim okr¹¿eniu)
		IF @Poziom = 1
			BREAK

		-- pêtla po ojcach danego poziomu
		DECLARE O CURSOR LOCAL FAST_FORWARD
		FOR
		SELECT GrOTyp
			, GrONumer
			, GrOLp
		FROM #G
		WHERE Poziom = @Poziom
		GROUP BY GrOTyp
			, GrONumer
			, GrOLp

		OPEN O

		WHILE 1 = 1
		BEGIN
			FETCH NEXT
			FROM O
			INTO @GrOTyp
				, @GrONumer
				, @GrOLp

			IF @@FETCH_STATUS &lt;&gt; 0
				BREAK

			-- modyfikujemy tylko tych ojców, którzy nie byli jeszcze modyfikowani (nie s¹ grupami linkowanymi i nie byli jeszcze modyfikowani)
			IF EXISTS (
					SELECT *
					FROM #G1
					WHERE GIDTyp = @GrOTyp
						AND GIDNumer = @GrONumer
						AND GIDLp = @GrOLp
					)
				BREAK

			-- kopia towarów nale¿¹cych do ojca
			SELECT *
			INTO #O
			FROM #L
			WHERE GrOTyp = @GrOTyp
				AND GrONumer = @GrONumer
				AND GrOLp = @GrOLp

			DELETE
			FROM #L
			WHERE GrOTyp = @GrOTyp
				AND GrONumer = @GrONumer
				AND GrOLp = @GrOLp

			-- pêtla po dzieciach (grupach) jednego ojca w celu zupdatowania ojca
			DECLARE D CURSOR LOCAL FAST_FORWARD
			FOR
			SELECT GIDTyp
				, GIDNumer
				, GIDLp
			FROM #G
			WHERE GrOTyp = @GrOTyp
				AND GrONumer = @GrONumer
				AND GrOLp = @GrOLp
			GROUP BY GIDTyp
				, GIDNumer
				, GIDLp

			OPEN D

			WHILE 1 = 1
			BEGIN
				FETCH NEXT
				FROM D
				INTO @GIDTyp
					, @GIDNumer
					, @GIDLp

				IF @@FETCH_STATUS &lt;&gt; 0
					BREAK

				-- uzupe³nienie rejestru grup obrabianych
				INSERT INTO #G1
				SELECT @GIDTyp
					, @GIDNumer
					, @GIDLp

				-- kopia towarów aktualnego dziecka
				SELECT *
				INTO #D
				FROM #L
				WHERE GrOTyp = @GIDTyp
					AND GrONumer = @GIDNumer
					AND GrOLp = @GIDLp

				-- update LiczbaPowtorzen ojca - sumowanie iloœci powtórzeñ dla towarów które istniej¹ u ojca i u dziecka
				UPDATE #O
				SET #O.LiczbaPowtorzen = #O.LiczbaPowtorzen + #D.LiczbaPowtorzen
				FROM #O
				INNER JOIN #D
					ON #O.GIDTyp = #D.GIDTyp
						AND #O.GIDNumer = #D.GIDNumer
						AND #O.GIDLp = #D.GIDLp

				-- insert do grupy ojca - dodanie towarów, które nie istniej¹ u ojca, a istniej¹ u dziecka
				INSERT INTO #O (
					GIDTyp
					, GIDNumer
					, GIDLp
					, GrOTyp
					, GrONumer
					, GrOLp
					, Lisc
					, LiczbaPowtorzen
					)
				SELECT #D.GIDTyp
					, #D.GIDNumer
					, #D.GIDLp
					, @GroTyp
					, @GrONumer
					, @GrOLp
					, 0
					, #D.LiczbaPowtorzen
				FROM #D
				LEFT JOIN #O
					ON #O.GIDTyp = #D.GIDTyp
						AND #O.GIDNumer = #D.GIDNumer
						AND #O.GIDLp = #D.GIDLp
				WHERE #O.GIDTyp IS NULL

				-- aktualne dziecko nie jest ju¿ potrzebne
				DROP TABLE #D
			END

			CLOSE D

			DEALLOCATE D

			-- kopia gotowego ojca z powrotem do #L i drop ojca
			INSERT INTO #L
			SELECT *
			FROM #O

			DROP TABLE #O
		END

		CLOSE O

		DEALLOCATE O
	END

	CLOSE P

	DEALLOCATE P

	DECLARE @TStampDataMod INT

	SET @TStampDataMod = DATEDIFF(S, '19900101', GETDATE())

	IF @KT = 'T'
		INSERT INTO cdn.TwrLinki (
			TwL_GIDTyp
			, TwL_GIDFirma
			, TwL_GIDNumer
			, TwL_GIDLp
			, TwL_GrOTyp
			, TwL_GrOFirma
			, TwL_GrONumer
			, TwL_GrOLp
			, TwL_Lisc
			, TwL_LiczbaPowtorzen
			, TwL_TStampDataMod
			)
		SELECT GIDTyp
			, @GIDFirma
			, GIDNumer
			, GIDLp
			, GrOTyp
			, @GIDFirma
			, GrONumer
			, GrOLp
			, Lisc
			, LiczbaPowtorzen
			, @TStampDataMod
		FROM #L
	ELSE IF @KT = 'K'
		INSERT INTO cdn.KntLinki (
			KnL_GIDTyp
			, KnL_GIDFirma
			, KnL_GIDNumer
			, KnL_GIDLp
			, KnL_GrOTyp
			, KnL_GrOFirma
			, KnL_GrONumer
			, KnL_GrOLp
			, KnL_Lisc
			, KnL_LiczbaPowtorzen
			, KnL_TStampDataMod
			)
		SELECT GIDTyp
			, @GIDFirma
			, GIDNumer
			, GIDLp
			, GrOTyp
			, @GIDFirma
			, GrONumer
			, GrOLp
			, Lisc
			, LiczbaPowtorzen
			, @TStampDataMod
		FROM #L
	ELSE IF @KT = 'S'
		INSERT INTO cdn.SrtLinki (
			SRL_GIDTyp
			, SRL_GIDFirma
			, SRL_GIDNumer
			, SRL_GIDLp
			, SRL_GrOTyp
			, SRL_GrOFirma
			, SRL_GrONumer
			, SRL_GrOLp
			, SRL_Lisc
			, SRL_LiczbaPowtorzen
			, SRL_TStampDataMod
			)
		SELECT GIDTyp
			, @GIDFirma
			, GIDNumer
			, GIDLp
			, GrOTyp
			, @GIDFirma
			, GrONumer
			, GrOLp
			, Lisc
			, LiczbaPowtorzen
			, @TStampDataMod
		FROM #L
	ELSE IF @KT = 'F'
		INSERT INTO cdn.FrmLinki (
			FRL_GIDTyp
			, FRL_GIDFirma
			, FRL_GIDNumer
			, FRL_GIDLp
			, FRL_GrOTyp
			, FRL_GrOFirma
			, FRL_GrONumer
			, FRL_GrOLp
			, FRL_Lisc
			, FRL_LiczbaPowtorzen
			, FRL_TStampDataMod
			)
		SELECT GIDTyp
			, @GIDFirma
			, GIDNumer
			, GIDLp
			, GrOTyp
			, @GIDFirma
			, GrONumer
			, GrOLp
			, Lisc
			, LiczbaPowtorzen
			, @TStampDataMod
		FROM #L

	DROP TABLE #G1

	DROP TABLE #G

	DROP TABLE #L
	
	IF @KT = 'M' --ERPXL-7799 Uwzglêdnienie MagLinki w apteczce
	BEGIN
		TRUNCATE TABLE CDN.MagLinki
		
		INSERT INTO CDN.MagLinki
		SELECT *
		FROM cdn.BudujMagLinkiKuLisciom()
	END	

	SET NOCOUNT OFF
END
	--&lt;
GO

GRANT EXECUTE
	ON CDN.AktualizujLinki
	TO CDNRaport
		--&lt;
GO


</ROOT>
